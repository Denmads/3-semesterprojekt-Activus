/*
 * This file is generated by jOOQ.
 */
package Persistence.Database.generated.tables;


import Persistence.Database.generated.Indexes;
import Persistence.Database.generated.Keys;
import Persistence.Database.generated.Public;
import Persistence.Database.generated.tables.records.SchemeTrainingProgramRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SchemeTrainingProgram extends TableImpl<SchemeTrainingProgramRecord> {

    private static final long serialVersionUID = 1428106044;

    /**
     * The reference instance of <code>public.scheme_training_program</code>
     */
    public static final SchemeTrainingProgram SCHEME_TRAINING_PROGRAM = new SchemeTrainingProgram();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SchemeTrainingProgramRecord> getRecordType() {
        return SchemeTrainingProgramRecord.class;
    }

    /**
     * The column <code>public.scheme_training_program.training_programid</code>.
     */
    public final TableField<SchemeTrainingProgramRecord, Integer> TRAINING_PROGRAMID = createField(DSL.name("training_programid"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.scheme_training_program.scheduleid</code>.
     */
    public final TableField<SchemeTrainingProgramRecord, Integer> SCHEDULEID = createField(DSL.name("scheduleid"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.scheme_training_program.day</code>.
     */
    public final TableField<SchemeTrainingProgramRecord, String> DAY = createField(DSL.name("day"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("'No day'::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>public.scheme_training_program</code> table reference
     */
    public SchemeTrainingProgram() {
        this(DSL.name("scheme_training_program"), null);
    }

    /**
     * Create an aliased <code>public.scheme_training_program</code> table reference
     */
    public SchemeTrainingProgram(String alias) {
        this(DSL.name(alias), SCHEME_TRAINING_PROGRAM);
    }

    /**
     * Create an aliased <code>public.scheme_training_program</code> table reference
     */
    public SchemeTrainingProgram(Name alias) {
        this(alias, SCHEME_TRAINING_PROGRAM);
    }

    private SchemeTrainingProgram(Name alias, Table<SchemeTrainingProgramRecord> aliased) {
        this(alias, aliased, null);
    }

    private SchemeTrainingProgram(Name alias, Table<SchemeTrainingProgramRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> SchemeTrainingProgram(Table<O> child, ForeignKey<O, SchemeTrainingProgramRecord> key) {
        super(child, key, SCHEME_TRAINING_PROGRAM);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SCHEME_TRAINING_PROGRAM_DAY, Indexes.SCHEME_TRAINING_PROGRAM_PKEY);
    }

    @Override
    public UniqueKey<SchemeTrainingProgramRecord> getPrimaryKey() {
        return Keys.SCHEME_TRAINING_PROGRAM_PKEY;
    }

    @Override
    public List<UniqueKey<SchemeTrainingProgramRecord>> getKeys() {
        return Arrays.<UniqueKey<SchemeTrainingProgramRecord>>asList(Keys.SCHEME_TRAINING_PROGRAM_PKEY);
    }

    @Override
    public List<ForeignKey<SchemeTrainingProgramRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SchemeTrainingProgramRecord, ?>>asList(Keys.SCHEME_TRAINING_PROGRAM__FKSCHEME_TRA889963, Keys.SCHEME_TRAINING_PROGRAM__FKSCHEME_TRA313403);
    }

    public TrainingProgram trainingProgram() {
        return new TrainingProgram(this, Keys.SCHEME_TRAINING_PROGRAM__FKSCHEME_TRA889963);
    }

    public Scheme scheme() {
        return new Scheme(this, Keys.SCHEME_TRAINING_PROGRAM__FKSCHEME_TRA313403);
    }

    @Override
    public SchemeTrainingProgram as(String alias) {
        return new SchemeTrainingProgram(DSL.name(alias), this);
    }

    @Override
    public SchemeTrainingProgram as(Name alias) {
        return new SchemeTrainingProgram(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SchemeTrainingProgram rename(String name) {
        return new SchemeTrainingProgram(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SchemeTrainingProgram rename(Name name) {
        return new SchemeTrainingProgram(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}

/*
 * This file is generated by jOOQ.
 */
package Persistence.Database.generated.tables;


import Persistence.Database.generated.Indexes;
import Persistence.Database.generated.Keys;
import Persistence.Database.generated.Public;
import Persistence.Database.generated.tables.records.QuestionForBuddysRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QuestionForBuddys extends TableImpl<QuestionForBuddysRecord> {

    private static final long serialVersionUID = 152980569;

    /**
     * The reference instance of <code>public.question_for_buddys</code>
     */
    public static final QuestionForBuddys QUESTION_FOR_BUDDYS = new QuestionForBuddys();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuestionForBuddysRecord> getRecordType() {
        return QuestionForBuddysRecord.class;
    }

    /**
     * The column <code>public.question_for_buddys.id</code>.
     */
    public final TableField<QuestionForBuddysRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('question_for_buddys_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.question_for_buddys.train_with_them</code>.
     */
    public final TableField<QuestionForBuddysRecord, Boolean> TRAIN_WITH_THEM = createField(DSL.name("train_with_them"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.question_for_buddys.what_do_i_train</code>. I train some stuff
     */
    public final TableField<QuestionForBuddysRecord, String> WHAT_DO_I_TRAIN = createField(DSL.name("what_do_i_train"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("'Why would i train anything'::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "I train some stuff");

    /**
     * The column <code>public.question_for_buddys.experience</code>. Are you new to the gym or exercise. Or do you know what you are doing?
     */
    public final TableField<QuestionForBuddysRecord, String> EXPERIENCE = createField(DSL.name("experience"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("'new'::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "Are you new to the gym or exercise. Or do you know what you are doing?");

    /**
     * The column <code>public.question_for_buddys.profileid</code>.
     */
    public final TableField<QuestionForBuddysRecord, Integer> PROFILEID = createField(DSL.name("profileid"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.question_for_buddys</code> table reference
     */
    public QuestionForBuddys() {
        this(DSL.name("question_for_buddys"), null);
    }

    /**
     * Create an aliased <code>public.question_for_buddys</code> table reference
     */
    public QuestionForBuddys(String alias) {
        this(DSL.name(alias), QUESTION_FOR_BUDDYS);
    }

    /**
     * Create an aliased <code>public.question_for_buddys</code> table reference
     */
    public QuestionForBuddys(Name alias) {
        this(alias, QUESTION_FOR_BUDDYS);
    }

    private QuestionForBuddys(Name alias, Table<QuestionForBuddysRecord> aliased) {
        this(alias, aliased, null);
    }

    private QuestionForBuddys(Name alias, Table<QuestionForBuddysRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> QuestionForBuddys(Table<O> child, ForeignKey<O, QuestionForBuddysRecord> key) {
        super(child, key, QUESTION_FOR_BUDDYS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.QUESTION_FOR_BUDDYS_PKEY);
    }

    @Override
    public Identity<QuestionForBuddysRecord, Integer> getIdentity() {
        return Keys.IDENTITY_QUESTION_FOR_BUDDYS;
    }

    @Override
    public UniqueKey<QuestionForBuddysRecord> getPrimaryKey() {
        return Keys.QUESTION_FOR_BUDDYS_PKEY;
    }

    @Override
    public List<UniqueKey<QuestionForBuddysRecord>> getKeys() {
        return Arrays.<UniqueKey<QuestionForBuddysRecord>>asList(Keys.QUESTION_FOR_BUDDYS_PKEY);
    }

    @Override
    public List<ForeignKey<QuestionForBuddysRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<QuestionForBuddysRecord, ?>>asList(Keys.QUESTION_FOR_BUDDYS__FKQUESTION_F273342);
    }

    public Profile profile() {
        return new Profile(this, Keys.QUESTION_FOR_BUDDYS__FKQUESTION_F273342);
    }

    @Override
    public QuestionForBuddys as(String alias) {
        return new QuestionForBuddys(DSL.name(alias), this);
    }

    @Override
    public QuestionForBuddys as(Name alias) {
        return new QuestionForBuddys(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionForBuddys rename(String name) {
        return new QuestionForBuddys(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionForBuddys rename(Name name) {
        return new QuestionForBuddys(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Boolean, String, String, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}

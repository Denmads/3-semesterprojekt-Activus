/*
 * This file is generated by jOOQ.
 */
package persistence.database.generated.tables;


import java.sql.Time;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import persistence.database.generated.Indexes;
import persistence.database.generated.Keys;
import persistence.database.generated.Public;
import persistence.database.generated.tables.records.TraningsHoursRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TraningsHours extends TableImpl<TraningsHoursRecord> {

    private static final long serialVersionUID = -1388415;

    /**
     * The reference instance of <code>public.tranings_hours</code>
     */
    public static final TraningsHours TRANINGS_HOURS = new TraningsHours();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TraningsHoursRecord> getRecordType() {
        return TraningsHoursRecord.class;
    }

    /**
     * The column <code>public.tranings_hours.id</code>.
     */
    public final TableField<TraningsHoursRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('tranings_hours_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.tranings_hours.day</code>. Day you train
     */
    public final TableField<TraningsHoursRecord, String> DAY = createField(DSL.name("day"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("'No day'::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "Day you train");

    /**
     * The column <code>public.tranings_hours.starting_time</code>.
     */
    public final TableField<TraningsHoursRecord, Time> STARTING_TIME = createField(DSL.name("starting_time"), org.jooq.impl.SQLDataType.TIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("'16:40:00'::time without time zone", org.jooq.impl.SQLDataType.TIME)), this, "");

    /**
     * The column <code>public.tranings_hours.end_time</code>.
     */
    public final TableField<TraningsHoursRecord, Time> END_TIME = createField(DSL.name("end_time"), org.jooq.impl.SQLDataType.TIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("'18:00:00'::time without time zone", org.jooq.impl.SQLDataType.TIME)), this, "");

    /**
     * The column <code>public.tranings_hours.question_for_buddysid</code>.
     */
    public final TableField<TraningsHoursRecord, Integer> QUESTION_FOR_BUDDYSID = createField(DSL.name("question_for_buddysid"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.tranings_hours</code> table reference
     */
    public TraningsHours() {
        this(DSL.name("tranings_hours"), null);
    }

    /**
     * Create an aliased <code>public.tranings_hours</code> table reference
     */
    public TraningsHours(String alias) {
        this(DSL.name(alias), TRANINGS_HOURS);
    }

    /**
     * Create an aliased <code>public.tranings_hours</code> table reference
     */
    public TraningsHours(Name alias) {
        this(alias, TRANINGS_HOURS);
    }

    private TraningsHours(Name alias, Table<TraningsHoursRecord> aliased) {
        this(alias, aliased, null);
    }

    private TraningsHours(Name alias, Table<TraningsHoursRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TraningsHours(Table<O> child, ForeignKey<O, TraningsHoursRecord> key) {
        super(child, key, TRANINGS_HOURS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TRANINGS_HOURS_PKEY);
    }

    @Override
    public Identity<TraningsHoursRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TRANINGS_HOURS;
    }

    @Override
    public UniqueKey<TraningsHoursRecord> getPrimaryKey() {
        return Keys.TRANINGS_HOURS_PKEY;
    }

    @Override
    public List<UniqueKey<TraningsHoursRecord>> getKeys() {
        return Arrays.<UniqueKey<TraningsHoursRecord>>asList(Keys.TRANINGS_HOURS_PKEY);
    }

    @Override
    public List<ForeignKey<TraningsHoursRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TraningsHoursRecord, ?>>asList(Keys.TRANINGS_HOURS__FKTRANINGS_H999671);
    }

    public QuestionForBuddys questionForBuddys() {
        return new QuestionForBuddys(this, Keys.TRANINGS_HOURS__FKTRANINGS_H999671);
    }

    @Override
    public TraningsHours as(String alias) {
        return new TraningsHours(DSL.name(alias), this);
    }

    @Override
    public TraningsHours as(Name alias) {
        return new TraningsHours(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TraningsHours rename(String name) {
        return new TraningsHours(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TraningsHours rename(Name name) {
        return new TraningsHours(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, Time, Time, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}

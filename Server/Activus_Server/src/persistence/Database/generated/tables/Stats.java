/*
 * This file is generated by jOOQ.
 */
package persistence.database.generated.tables;


import persistence.database.generated.Indexes;
import persistence.database.generated.Keys;
import persistence.database.generated.Public;
import persistence.database.generated.tables.records.StatsRecord;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Stats extends TableImpl<StatsRecord> {

    private static final long serialVersionUID = 1440445271;

    /**
     * The reference instance of <code>public.stats</code>
     */
    public static final Stats STATS = new Stats();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StatsRecord> getRecordType() {
        return StatsRecord.class;
    }

    /**
     * The column <code>public.stats.id</code>.
     */
    public final TableField<StatsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('stats_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.stats.profileid</code>.
     */
    public final TableField<StatsRecord, Integer> PROFILEID = createField(DSL.name("profileid"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.stats.exerciseid</code>.
     */
    public final TableField<StatsRecord, Integer> EXERCISEID = createField(DSL.name("exerciseid"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.stats.time_taken</code>.
     */
    public final TableField<StatsRecord, Long> TIME_TAKEN = createField(DSL.name("time_taken"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("'-1'::integer", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.stats.rebs</code>.
     */
    public final TableField<StatsRecord, Integer> REBS = createField(DSL.name("rebs"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("'-1'::integer", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.stats.sets</code>.
     */
    public final TableField<StatsRecord, Integer> SETS = createField(DSL.name("sets"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("'-1'::integer", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.stats.weight</code>.
     */
    public final TableField<StatsRecord, Integer> WEIGHT = createField(DSL.name("weight"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("'-1'::integer", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.stats.date</code>.
     */
    public final TableField<StatsRecord, Date> DATE = createField(DSL.name("date"), org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * Create a <code>public.stats</code> table reference
     */
    public Stats() {
        this(DSL.name("stats"), null);
    }

    /**
     * Create an aliased <code>public.stats</code> table reference
     */
    public Stats(String alias) {
        this(DSL.name(alias), STATS);
    }

    /**
     * Create an aliased <code>public.stats</code> table reference
     */
    public Stats(Name alias) {
        this(alias, STATS);
    }

    private Stats(Name alias, Table<StatsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Stats(Name alias, Table<StatsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Stats(Table<O> child, ForeignKey<O, StatsRecord> key) {
        super(child, key, STATS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STATS_EXERCISEID, Indexes.STATS_PKEY, Indexes.STATS_PROFILEID);
    }

    @Override
    public Identity<StatsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_STATS;
    }

    @Override
    public UniqueKey<StatsRecord> getPrimaryKey() {
        return Keys.STATS_PKEY;
    }

    @Override
    public List<UniqueKey<StatsRecord>> getKeys() {
        return Arrays.<UniqueKey<StatsRecord>>asList(Keys.STATS_PKEY);
    }

    @Override
    public List<ForeignKey<StatsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StatsRecord, ?>>asList(Keys.STATS__FKSTATS65934, Keys.STATS__FKSTATS911505);
    }

    public Profile profile() {
        return new Profile(this, Keys.STATS__FKSTATS65934);
    }

    public Exercise exercise() {
        return new Exercise(this, Keys.STATS__FKSTATS911505);
    }

    @Override
    public Stats as(String alias) {
        return new Stats(DSL.name(alias), this);
    }

    @Override
    public Stats as(Name alias) {
        return new Stats(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Stats rename(String name) {
        return new Stats(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Stats rename(Name name) {
        return new Stats(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, Integer, Long, Integer, Integer, Integer, Date> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}

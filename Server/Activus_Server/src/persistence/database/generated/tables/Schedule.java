/*
 * This file is generated by jOOQ.
 */
package persistence.database.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import persistence.database.generated.Indexes;
import persistence.database.generated.Keys;
import persistence.database.generated.Public;
import persistence.database.generated.tables.records.ScheduleRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Schedule extends TableImpl<ScheduleRecord> {

    private static final long serialVersionUID = -238738153;

    /**
     * The reference instance of <code>public.schedule</code>
     */
    public static final Schedule SCHEDULE = new Schedule();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScheduleRecord> getRecordType() {
        return ScheduleRecord.class;
    }

    /**
     * The column <code>public.schedule.id</code>.
     */
    public final TableField<ScheduleRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('schedule_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.schedule.name</code>.
     */
    public final TableField<ScheduleRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("'No name'::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.schedule.description</code>.
     */
    public final TableField<ScheduleRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("'No description'::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>public.schedule</code> table reference
     */
    public Schedule() {
        this(DSL.name("schedule"), null);
    }

    /**
     * Create an aliased <code>public.schedule</code> table reference
     */
    public Schedule(String alias) {
        this(DSL.name(alias), SCHEDULE);
    }

    /**
     * Create an aliased <code>public.schedule</code> table reference
     */
    public Schedule(Name alias) {
        this(alias, SCHEDULE);
    }

    private Schedule(Name alias, Table<ScheduleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Schedule(Name alias, Table<ScheduleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Schedule(Table<O> child, ForeignKey<O, ScheduleRecord> key) {
        super(child, key, SCHEDULE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SCHEDULE_PKEY);
    }

    @Override
    public Identity<ScheduleRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SCHEDULE;
    }

    @Override
    public UniqueKey<ScheduleRecord> getPrimaryKey() {
        return Keys.SCHEDULE_PKEY;
    }

    @Override
    public List<UniqueKey<ScheduleRecord>> getKeys() {
        return Arrays.<UniqueKey<ScheduleRecord>>asList(Keys.SCHEDULE_PKEY);
    }

    @Override
    public Schedule as(String alias) {
        return new Schedule(DSL.name(alias), this);
    }

    @Override
    public Schedule as(Name alias) {
        return new Schedule(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Schedule rename(String name) {
        return new Schedule(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Schedule rename(Name name) {
        return new Schedule(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}

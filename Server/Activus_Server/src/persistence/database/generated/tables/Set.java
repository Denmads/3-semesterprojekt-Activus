/*
 * This file is generated by jOOQ.
 */
package persistence.database.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import persistence.database.generated.Indexes;
import persistence.database.generated.Keys;
import persistence.database.generated.Public;
import persistence.database.generated.tables.records.SetRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Set extends TableImpl<SetRecord> {

    private static final long serialVersionUID = 2089153691;

    /**
     * The reference instance of <code>public.Set</code>
     */
    public static final Set SET = new Set();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SetRecord> getRecordType() {
        return SetRecord.class;
    }

    /**
     * The column <code>public.Set.time_taken</code>.
     */
    public final TableField<SetRecord, Long> TIME_TAKEN = createField(DSL.name("time_taken"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("(-1)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.Set.rebs</code>.
     */
    public final TableField<SetRecord, Integer> REBS = createField(DSL.name("rebs"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("(-1)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.Set.weight</code>.
     */
    public final TableField<SetRecord, Integer> WEIGHT = createField(DSL.name("weight"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("(-1)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.Set.set_index</code>.
     */
    public final TableField<SetRecord, Integer> SET_INDEX = createField(DSL.name("set_index"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.Set.id</code>.
     */
    public final TableField<SetRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('\"Set_id_seq\"'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>public.Set</code> table reference
     */
    public Set() {
        this(DSL.name("Set"), null);
    }

    /**
     * Create an aliased <code>public.Set</code> table reference
     */
    public Set(String alias) {
        this(DSL.name(alias), SET);
    }

    /**
     * Create an aliased <code>public.Set</code> table reference
     */
    public Set(Name alias) {
        this(alias, SET);
    }

    private Set(Name alias, Table<SetRecord> aliased) {
        this(alias, aliased, null);
    }

    private Set(Name alias, Table<SetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Set(Table<O> child, ForeignKey<O, SetRecord> key) {
        super(child, key, SET);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SET_PKEY);
    }

    @Override
    public Identity<SetRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SET;
    }

    @Override
    public UniqueKey<SetRecord> getPrimaryKey() {
        return Keys.SET_PKEY;
    }

    @Override
    public List<UniqueKey<SetRecord>> getKeys() {
        return Arrays.<UniqueKey<SetRecord>>asList(Keys.SET_PKEY);
    }

    @Override
    public Set as(String alias) {
        return new Set(DSL.name(alias), this);
    }

    @Override
    public Set as(Name alias) {
        return new Set(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Set rename(String name) {
        return new Set(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Set rename(Name name) {
        return new Set(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}

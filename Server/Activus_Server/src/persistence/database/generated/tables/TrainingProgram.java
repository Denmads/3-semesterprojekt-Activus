/*
 * This file is generated by jOOQ.
 */
package persistence.database.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import persistence.database.generated.Indexes;
import persistence.database.generated.Keys;
import persistence.database.generated.Public;
import persistence.database.generated.tables.records.TrainingProgramRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TrainingProgram extends TableImpl<TrainingProgramRecord> {

    private static final long serialVersionUID = 292421790;

    /**
     * The reference instance of <code>public.training_program</code>
     */
    public static final TrainingProgram TRAINING_PROGRAM = new TrainingProgram();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TrainingProgramRecord> getRecordType() {
        return TrainingProgramRecord.class;
    }

    /**
     * The column <code>public.training_program.id</code>.
     */
    public final TableField<TrainingProgramRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('training_program_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.training_program.name</code>.
     */
    public final TableField<TrainingProgramRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("'No name'::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.training_program.description</code>.
     */
    public final TableField<TrainingProgramRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("'No Description'::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.training_program.profile_id</code>.
     */
    public final TableField<TrainingProgramRecord, Integer> PROFILE_ID = createField(DSL.name("profile_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.training_program</code> table reference
     */
    public TrainingProgram() {
        this(DSL.name("training_program"), null);
    }

    /**
     * Create an aliased <code>public.training_program</code> table reference
     */
    public TrainingProgram(String alias) {
        this(DSL.name(alias), TRAINING_PROGRAM);
    }

    /**
     * Create an aliased <code>public.training_program</code> table reference
     */
    public TrainingProgram(Name alias) {
        this(alias, TRAINING_PROGRAM);
    }

    private TrainingProgram(Name alias, Table<TrainingProgramRecord> aliased) {
        this(alias, aliased, null);
    }

    private TrainingProgram(Name alias, Table<TrainingProgramRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TrainingProgram(Table<O> child, ForeignKey<O, TrainingProgramRecord> key) {
        super(child, key, TRAINING_PROGRAM);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TRAINING_PROGRAM_PKEY);
    }

    @Override
    public Identity<TrainingProgramRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TRAINING_PROGRAM;
    }

    @Override
    public UniqueKey<TrainingProgramRecord> getPrimaryKey() {
        return Keys.TRAINING_PROGRAM_PKEY;
    }

    @Override
    public List<UniqueKey<TrainingProgramRecord>> getKeys() {
        return Arrays.<UniqueKey<TrainingProgramRecord>>asList(Keys.TRAINING_PROGRAM_PKEY);
    }

    @Override
    public List<ForeignKey<TrainingProgramRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TrainingProgramRecord, ?>>asList(Keys.TRAINING_PROGRAM__PROFILE_ID);
    }

    public Profile profile() {
        return new Profile(this, Keys.TRAINING_PROGRAM__PROFILE_ID);
    }

    @Override
    public TrainingProgram as(String alias) {
        return new TrainingProgram(DSL.name(alias), this);
    }

    @Override
    public TrainingProgram as(Name alias) {
        return new TrainingProgram(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TrainingProgram rename(String name) {
        return new TrainingProgram(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TrainingProgram rename(Name name) {
        return new TrainingProgram(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
